---

- name: Check instance prerequisites
  assert:
    that:
      - openvpn__instance is defined
      - openvpn__instance.name is defined
      - openvpn__instance.options.mode in ['client', 'server', 'p2p']
      - openvpn__instance.options.proto in ['tcp', 'udp']
      - openvpn__instance.options.port is defined
      - openvpn__instance.options.dev is defined
        and (
          'tun' in openvpn__instance.options.dev
          or 'tap' in openvpn__instance.options.dev
          or (
            openvpn__instance.options.dev_type is defined
            and openvpn__instance.options.dev_type in ['tun', 'tap']
          )
        )
      - openvpn__instance.options.ipchange is not defined
          or openvpn__instance.options.mode in ['client']
      - openvpn__instance.options.compress is not defined
          or openvpn__instance.options.compress in ['lzo', 'lz4', '']
      - (openvpn__instance.options.keepalive is defined)|int + (openvpn__instance.options.ping is defined)|int <= 1
      - (openvpn__instance.options.secret is defined)|int +
        (openvpn__instance.options.ca is defined and openvpn__instance.options.cert is defined and openvpn__instance.options.key is defined)|int == 1
      - openvpn__instance.options.secret is not defined
          or (openvpn__instance.options.secret.content is defined)|int
           + (openvpn__instance.options.secret.path is defined)|int == 1
      - openvpn__instance.options.ca is not defined
          or (openvpn__instance.options.ca.content is defined)|int
           + (openvpn__instance.options.ca.path is defined)|int == 1
      - openvpn__instance.options.cert is not defined
          or (openvpn__instance.options.cert.content is defined)|int
           + (openvpn__instance.options.cert.path is defined)|int == 1
      - openvpn__instance.options.key is not defined
          or (openvpn__instance.options.key.content is defined)|int
           + (openvpn__instance.options.key.path is defined)|int == 1
    msg: >
      openvpn__instance must be defined with specifications,
      openvpn__instance.name must contains the name of the instance,
  tags: ['always']

- name: Check instance scripts prerequisites
  assert:
    that:
      - item.type in ['up', 'down']
      - item.format is not defined or item.format in ['bash']
  with_items: '{{ openvpn__instance.scripts|list }}'
  tags: ['always']

# init

- name: 'Init some values for {{ openvpn__instance.name }}'
  set_fact:
    _openvpn__instance_conf_directory: '{{ openvpn__configuration_directory }}/{{ openvpn__instance.name }}'
    _openvpn__instance_var_directory: '{{ openvpn__var_directory }}/{{ openvpn__instance.name }}'
    _openvpn__instance_default_script_security: '{{ openvpn__instance.scripts|length|ternary(2, 1) }}'
  tags: ['always']

- name: 'Compute paths for {{ openvpn__instance.name }}'
  set_fact:
    _openvpn__instance_static_key_path: '{{ _openvpn__instance_conf_directory }}/static.key'
    _openvpn__instance_tls_ca_cert_path: '{{ _openvpn__instance_conf_directory }}/certificate_autority.pem'
    _openvpn__instance_tls_server_cert_path: '{{ _openvpn__instance_conf_directory }}/server_certificate.pem'
    _openvpn__instance_tls_server_key_path: '{{ _openvpn__instance_conf_directory }}/server_key.pem'
    _openvpn__instance_tls_dh_path: '{{ _openvpn__instance_conf_directory }}/dh.pem'
    _openvpn__instance_tls_auth_path: '{{ _openvpn__instance_conf_directory }}/ta.key'
    _openvpn__instance_pool_persist_file_path: '{{ _openvpn__instance_var_directory }}/ipp.txt'
    _openvpn__instance_scripts_directory_map:
      up: '{{ _openvpn__instance_conf_directory }}/up.d'
      down: '{{ _openvpn__instance_conf_directory }}/down.d'
  tags: ['always']

# directories

- name: 'Ensure instance directories for {{ openvpn__instance.name }}'
  file:
    path: '{{ item.path }}'
    owner: root
    group: '{{ openvpn__service_group }}'
    mode: "{{ item.mode|d('0750') }}"
    state: directory
  with_items:
    - path: '{{ _openvpn__instance_conf_directory }}'
    - path: '{{ _openvpn__instance_var_directory }}'
      mode: '0770'
    - "{%- set _path = [] -%}
      {%- for p in _openvpn__instance_scripts_directory_map.values() -%}
      {%- set _ = _path.append({'path': p}) -%}
      {%- endfor -%}
      {{ _path }}"

  when: openvpn__instance.state|d('present') == 'present'
  tags: ['openvpn', 'openvpn-configure']

# STATIC KEY

- name: 'Copy content of static key for {{ openvpn__instance.name }}'
  copy:
    dest: '{{ _openvpn__instance_static_key_path }}'
    owner: '{{ openvpn__service_user }}'
    group: '{{ openvpn__service_group }}'
    mode: 0600
    content: '{{ openvpn__instance.options.secret.content }}'
  when: openvpn__instance.state|d('present') == 'present'
    and openvpn__instance.options.secret is defined
    and openvpn__instance.options.secret.content is defined
  tags: ['openvpn', 'openvpn-configure']

- name: 'Remove content of static key for {{ openvpn__instance.name }}'
  file:
    path: '{{ _openvpn__instance_static_key_path }}'
    state: absent
  when: openvpn__instance.options.secret is not defined
    or (openvpn__instance.state|d('present') != 'present'
      and openvpn__instance.options.secret.content is defined)
  tags: ['openvpn', 'openvpn-configure']

# TLS

- name: 'Copy content of TLS files for {{ openvpn__instance.name }}'
  copy:
    dest: '{{ item.path }}'
    owner: '{{ openvpn__service_user }}'
    group: '{{ openvpn__service_group }}'
    mode: "{{ item.mode|d('0640') }}"
    content: '{{ item.config.content }}'
  with_items:
    - config: '{{ openvpn__instance.options.ca|d() }}'
      path: '{{ _openvpn__instance_tls_ca_cert_path }}'
    - config: '{{ openvpn__instance.options.cert|d() }}'
      path: '{{ _openvpn__instance_tls_server_cert_path }}'
    - config: '{{ openvpn__instance.options.key|d() }}'
      path: '{{ _openvpn__instance_tls_server_key_path }}'
      mode: '0600'
  when: openvpn__instance.state|d('present') == 'present'
    and item.config.content is defined
    and openvpn__instance.options.secret is not defined
  tags: ['openvpn', 'openvpn-configure']

- name: 'Remove content of TLS files for {{ openvpn__instance.name }}'
  file:
    path: '{{ item.path }}'
    state: absent
  with_items:
    - config: '{{ openvpn__instance.options.ca|d() }}'
      path: '{{ _openvpn__instance_tls_ca_cert_path }}'
    - config: '{{ openvpn__instance.options.cert|d() }}'
      path: '{{ _openvpn__instance_tls_server_cert_path }}'
    - config: '{{ openvpn__instance.options.key|d() }}'
      path: '{{ _openvpn__instance_tls_server_key_path }}'
  when: openvpn__instance.options.secret is defined
    or (openvpn__instance.state|d('present') != 'present'
      and item.config.content is defined)
  tags: ['openvpn', 'openvpn-configure']

- name: Check presence of DH parameters
  stat:
    path: '{{ _openvpn__instance_tls_dh_path }}'
  register: _openvpn__tls_dh_stat
  tags: ['openvpn', 'openvpn-configure']

- name: 'Check size of current DH parameters for {{ openvpn__instance.name }}'
  shell: >
    openssl dhparam
    -in {{ _openvpn__instance_tls_dh_path }}
    -text -noout 2>&1
    | grep Parameters
    | sed 's/.*Parameters:\s*(\([0-9]\+\).*/\1/'
  when: _openvpn__tls_dh_stat.stat is defined
    and _openvpn__tls_dh_stat.stat.exists
  changed_when: false
  check_mode: false
  register: _openvpn__tls_dh_size
  tags: ['openvpn', 'openvpn-configure']

- name: 'Remove bad sized DH parameters for {{ openvpn__instance.name }}'
  file:
    path: '{{ _openvpn__instance_tls_dh_path }}'
    state: absent
  when: _openvpn__tls_dh_stat.stat is defined
    and _openvpn__tls_dh_stat.stat.exists
    and _openvpn__tls_dh_size.stdout|int != openvpn__instance.dh
    or openvpn__instance.options.secret is defined
    or openvpn__instance.state|d('present') != 'present'
  tags: ['openvpn', 'openvpn-configure']

- name: 'Generate DH parameters if needed for {{ openvpn__instance.name }}'
  command: >
    openssl dhparam
    -out {{ _openvpn__instance_tls_dh_path }}
    {{ openvpn__instance.options.dh|int }}
  args:
    creates: '{{ _openvpn__instance_tls_dh_path }}'
  when: openvpn__instance.state|d('present') == 'present'
    and openvpn__instance.options.dh != 'none'
    and openvpn__instance.options.secret is not defined
  register: _openvpn__tls_dh_generate
  tags: ['openvpn', 'openvpn-configure']

- name: 'Ensure restricted permissions on DH parameters for {{ openvpn__instance.name }}'
  file:
    path: '{{ _openvpn__instance_tls_dh_path }}'
    owner: '{{ openvpn__service_user }}'
    group: '{{ openvpn__service_group }}'
    mode: 0640
  when: _openvpn__tls_dh_generate is not skipped
  tags: ['openvpn', 'openvpn-configure']

- name: 'Check presence of secret key for {{ openvpn__instance.name }}'
  stat:
    path: '{{ _openvpn__instance_tls_auth_path }}'
  register: _openvpn__tls_auth_stat
  tags: ['openvpn', 'openvpn-configure']

- name: 'Generate secret key if needed for {{ openvpn__instance.name }}'
  command: >
    openvpn --genkey --secret
    {{ _openvpn__instance_tls_auth_path }}
  args:
    creates: '{{ _openvpn__instance_tls_auth_path }}'
  when: openvpn__instance.state|d('present') == 'present'
    and openvpn__instance.options.tls_auth is not string
    and openvpn__instance.options.tls_auth|bool
    and openvpn__instance.options.secret is not defined
  register: _openvpn__tls_auth_generate
  tags: ['openvpn', 'openvpn-configure']

- name: 'Ensure restricted permissions on secret key for {{ openvpn__instance.name }}'
  file:
    path: '{{ _openvpn__instance_tls_auth_path }}'
    owner: '{{ openvpn__service_user }}'
    group: '{{ openvpn__service_group }}'
    mode: 0640
  when: _openvpn__tls_auth_generate is not skipped
  tags: ['openvpn', 'openvpn-configure']

# scripts

- name: Install instance scripts
  template:
    src: "script.{{ item.format|d('blank') }}.j2"
    dest: '{{ _openvpn__instance_scripts_directory_map[item.type] }}/{{ item.name }}'
    owner: root
    group: '{{ openvpn__service_group }}'
    mode: 0750
  with_items: '{{ openvpn__instance.scripts|d([])|list }}'
  when: openvpn__instance.state|d('present') == 'present'
  vars:
    openvpn__instance_script: '{{ item }}'
  tags: ['openvpn', 'openvpn-configure']

- name: List installed scripts
  find:
    paths: '{{ item.value }}'
    file_type: file
  with_dict: '{{ _openvpn__instance_scripts_directory_map }}'
  register: _openvpn__instance_installed_scripts
  tags: ['openvpn', 'openvpn-configure']

- name: Remove unwanted scripts
  file:
    path: '{{ item.1.path }}'
    state: absent
  with_subelements:
    - '{{ _openvpn__instance_installed_scripts.results|list }}'
    - files
  when: item.1.path|basename not in openvpn__instance.scripts|selectattr('type', 'equalto', item.0.item.key)|map(attribute='name')|list
    or openvpn__instance.state|d('present') != 'present'
  tags: ['openvpn', 'openvpn-configure']

# directories

- name: 'Remove instance folders for {{ openvpn__instance.name }}'
  file:
    path: '{{ item }}'
    state: absent
  with_items:
    - '{{ _openvpn__instance_conf_directory }}'
    - '{{ _openvpn__instance_var_directory }}'
    - '{{ _openvpn__instance_scripts_directory_map.values()|list }}'
  when: openvpn__instance.state|d('present') != 'present'
  tags: ['openvpn', 'openvpn-configure']

# service configuration

- name: 'Test if configuration file exists for {{ openvpn__instance.name }}'
  stat:
    path: "{{ openvpn__configuration_file|replace('%i', openvpn__instance.name) }}"
  register: _openvpn__instance_config_stat
  tags: ['openvpn', 'openvpn-configure']

- name: 'Install openvpn instance configuration file for {{ openvpn__instance.name }}'
  template:
    src: '{{ openvpn__instance.options.mode }}.conf.j2'
    dest: "{{ openvpn__configuration_file|replace('%i', openvpn__instance.name) }}"
    owner: root
    group: '{{ openvpn__service_group }}'
    mode: 0640
  when: openvpn__instance.state|d('present') == 'present'
  register: _openvpn__instance_config
  tags: ['openvpn', 'openvpn-configure']

- name: 'Remove openvpn instance configuration file for {{ openvpn__instance.name }}'
  file:
    path: "{{ openvpn__configuration_file|replace('%i', openvpn__instance.name) }}"
    state: absent
  when: openvpn__instance.state|d('present') != 'present'
  tags: ['openvpn', 'openvpn-configure']

# service

- name: 'Compute instance service status for {{ openvpn__instance.name }}'
  set_fact:
    _openvpn__instance_service_status: "{{
      (openvpn__service_user == 'root')|ternary('reloaded', 'restarted')
      if _openvpn__instance_config_stat.stat.exists
        and (_openvpn__instance_config is changed or
            _openvpn__tls_dh_generate is changed
        )
      else 'started' }}"
  tags: ['openvpn', 'openvpn-configure']

- name: 'Ensure openvpn is started and enabled on boot for {{ openvpn__instance.name }}'
  service:
    name: "{{ openvpn__service_name|replace('%i', openvpn__instance.name) }}"
    enabled: "{{ openvpn__service_enabled|bool if openvpn__instance.state|d('present') == 'present' else false }}"
    state: "{{ (openvpn__service_enabled|bool if openvpn__instance.state|d('present') == 'present' else false)|ternary(_openvpn__instance_service_status, 'stopped') }}"
  tags: ['openvpn', 'openvpn-configure', 'openvpn-service']
